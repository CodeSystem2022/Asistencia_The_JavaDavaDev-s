# Asistencia mes de Noviembre: Marcelo Boujón

class Rectangulo:
"""
Crear una clase llamada Rectángulo, que debe tener 2 atributos: altura y base
el nombre del método será calcular_area utilizando la fórmula:
area = base * altura.
Pero la base y la altura deben ser ingresadas por
el usuario y los objetos deben ser tres.
"""

  def init(self, altura, base):
    self.altura = altura
    self.base = base

  def calcular_area(self):
    return self.base * self.altura

base = int(input('Digíte un número para la base del rectángulo: '))

altura = int(input('Digíte un número para la altura del rectángulo: '))

rectangulo1 = Rectangulo(base, altura)

print(f'El área del rectangulo es: {rectangulo1.calcular_area()}')

-------------------------------------------------------------------------------------------------------------------------------------------------------------------


# Asistencia mes de noviembre: David Esteche.

class Asistencia:
    def __init__(self, materias, dia,horario):
        self.materias = materias
        self.dia = dia
        self.horario = horario

    def __str__(self):
        return f'La materia {self.materias} se dicta los días {self.dia} en el horario de {self.horario} hs.'

materia1 = Asistencia('Estadistica', 'Lunes', 19)
print(materia1)
materia2 = Asistencia('Laboratorio', 'Martes', 19)
print(materia2)
materia3 = Asistencia('Arquitectura', 'Miercoles',19)
print(materia3)
materia4 = Asistencia('Metodología', 'Miércoles', 21)
print(materia4)
materia5 = Asistencia('Ingles', 'Jueves', 20)
print(materia5)
materia6 = Asistencia('Programcion', 'Viernes', 19)
print(materia6)


--------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Asistencia mes de noviembre: Johana Martinez

class Persona:
    def __init__(self, nombre, edad):
        self.nombre = nombre
        self.edad = edad

    def __add__(self, other):  # Other = otro
        return f'{self.nombre} {other.nombre}'

    def __sub__(self, otro):  # Sub = (resta)
        return self.edad - otro.edad


persona1 = Persona('Ariel', 40)
persona2 = Persona('Betancud', 5)

# persona1.__add__(persona2) sintaxis interna y automatica

print(persona1 + persona2)
print(persona1 - persona2)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Asistencia mes de noviembre: Margarita Campos

class Producto:
    contador_productos = 0  # Variable de clase

    def __init__(self, nombre, precio):
        Producto.contador_productos += 1  # Aumento para la variable de clase
        self._id_producto = Producto.contador_productos  # Asignación desde la variable de clase
        self._nombre = nombre
        self._precio = precio

    # Métodos setters and getters
    @property
    def nombre(self):
        return self._nombre

    @nombre.setter
    def nombre(self, nombre):
        self._nombre = nombre

    @property
    def precio(self):
        return self._precio

    @precio.setter
    def precio(self, precio):
        self._precio = precio

    # Sobre escribimos el método str
    def __str__(self):
        return f'Id Producto: {self._id_producto}, Nombre: {self._nombre}, Precio: {self._precio}'


if __name__ == '__main__':  # Solo será visible se la prueba se ejecuta desde aquí
    producto1 = Producto('Camiseta', 100.00)
    print(producto1)
    producto2 = Producto('Pantalon', 150.00)
    print(producto2)
