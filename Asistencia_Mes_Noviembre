# Asistencia mes de Noviembre: Marcelo Boujón

class Rectangulo:
"""
Crear una clase llamada Rectángulo, que debe tener 2 atributos: altura y base
el nombre del método será calcular_area utilizando la fórmula:
area = base * altura.
Pero la base y la altura deben ser ingresadas por
el usuario y los objetos deben ser tres.
"""

  def init(self, altura, base):
    self.altura = altura
    self.base = base

  def calcular_area(self):
    return self.base * self.altura

base = int(input('Digíte un número para la base del rectángulo: '))

altura = int(input('Digíte un número para la altura del rectángulo: '))

rectangulo1 = Rectangulo(base, altura)

print(f'El área del rectangulo es: {rectangulo1.calcular_area()}')

-------------------------------------------------------------------------------------------------------------------------------------------------------------------


# Asistencia mes de noviembre: David Esteche.

class Asistencia:
    def __init__(self, materias, dia,horario):
        self.materias = materias
        self.dia = dia
        self.horario = horario

    def __str__(self):
        return f'La materia {self.materias} se dicta los días {self.dia} en el horario de {self.horario} hs.'

materia1 = Asistencia('Estadistica', 'Lunes', 19)
print(materia1)
materia2 = Asistencia('Laboratorio', 'Martes', 19)
print(materia2)
materia3 = Asistencia('Arquitectura', 'Miercoles',19)
print(materia3)
materia4 = Asistencia('Metodología', 'Miércoles', 21)
print(materia4)
materia5 = Asistencia('Ingles', 'Jueves', 20)
print(materia5)
materia6 = Asistencia('Programcion', 'Viernes', 19)
print(materia6)


--------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Asistencia mes de noviembre: Johana Martinez

class Persona:
    def __init__(self, nombre, edad):
        self.nombre = nombre
        self.edad = edad

    def __add__(self, other):  # Other = otro
        return f'{self.nombre} {other.nombre}'

    def __sub__(self, otro):  # Sub = (resta)
        return self.edad - otro.edad


persona1 = Persona('Ariel', 40)
persona2 = Persona('Betancud', 5)

# persona1.__add__(persona2) sintaxis interna y automatica

print(persona1 + persona2)
print(persona1 - persona2)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Asistencia mes de noviembre: Margarita Campos

class Producto:
    contador_productos = 0  # Variable de clase

    def __init__(self, nombre, precio):
        Producto.contador_productos += 1  # Aumento para la variable de clase
        self._id_producto = Producto.contador_productos  # Asignación desde la variable de clase
        self._nombre = nombre
        self._precio = precio

    # Métodos setters and getters
    @property
    def nombre(self):
        return self._nombre

    @nombre.setter
    def nombre(self, nombre):
        self._nombre = nombre

    @property
    def precio(self):
        return self._precio

    @precio.setter
    def precio(self, precio):
        self._precio = precio

    # Sobre escribimos el método str
    def __str__(self):
        return f'Id Producto: {self._id_producto}, Nombre: {self._nombre}, Precio: {self._precio}'


if __name__ == '__main__':  # Solo será visible se la prueba se ejecuta desde aquí
    producto1 = Producto('Camiseta', 100.00)
    print(producto1)
    producto2 = Producto('Pantalon', 150.00)
    print(producto2)
    
    --------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Asistencia mes de noviembre: Augusto Nicolás Casado
    
    
from Empleado import Empleado
from Gerente import Gerente


def imprimir_detalles(objeto): # Este es el método para aprender lo que es el polimorfismo
    # print(objeto)  # De manera indirecta llama al str de la clase Empleado o Gerente
    print(type(objeto))  # Esto es para saber el tipo de dato que recibe
    print(objeto.mostrar_detalles())
    if isinstance(objeto, Gerente):
        print(objeto.departamento)


empleado = Empleado('Ariel', 50000)
imprimir_detalles(empleado)

gerente = Gerente('Natalia', 60000, 'Sistemas')
imprimir_detalles(gerente)

from Empleado import Empleado


class Gerente(Empleado):
    def __init__(self, nombre, sueldo, departamento):
        super().__init__(nombre, sueldo)
        self.departamento = departamento

    def __str__(self):
        return f'Gerente [ Departamento: {self.departamento}] {super().__str__()}'
        
class Empleado:  # No hereda sino solo de la clase object
    def __init__(self, nombre, sueldo):
        self.nombre = nombre
        self.sueldo = sueldo

    def __str__(self):
        return f'Empleado: [Nombre: {self.nombre}, Sueldo: {self.sueldo}]'

    def mostrar_detalles(self):
        return self.__str__()
        
         --------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Asistencia mes de noviembre: Gilda Carolina Mamani Condori
    
    from Producto import Producto


class Orden:
    contador_ordenes = 0

    def __init__(self, productos):
        Orden.contador_ordenes += 1
        self.id_orden = Orden.contador_ordenes
        self._productos = list(productos)

    def agregar_producto(self, producto):
        self._productos.append(producto)  

    def calcular_total(self):
        total = 0  
        for producto in self._productos:
            total += producto.precio
        return total

    def __str__(self):
        productos_str = ''
        for producto in self._productos:
            productos_str += producto.__str__() + '|'
        return f'Orden: {self.id_orden}, \nProducto: {productos_str}'


if __name__ == '__main__':
    producto1 = Producto('Camiseta', 100.00)
    producto2 = Producto('Pantalon', 150.00)
    productos1 = [producto1, producto2] 
    orden1 = Orden(productos1) 
    print(orden1)
    orden2 = Orden(productos1)
    print(orden2)

        --------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Asistencia mes de noviembre: Araceli Pintos
    
    
    class Persona:
    contador_personas = 0

    def __init__ (self, nombre, edad):
        Persona.contador_personas += 1
        self.id_persona = Persona.contador_personas
        self.nombre = nombre
        self.edad = edad

    def __str__(self):
     return f'Persona [{self.id_persona}= {self.nombre} {self.edad}]'

persona1 = Persona('Araceli',20)
print(persona1)
persona2 = Persona('Carolina',40)
print(persona2)
persona3 = Persona('Sofia',40)
print(persona3)
persona4 = Persona('Augusto',40)
print(persona4)
persona5 = Persona('Marita',40)
print(persona5)
persona6 = Persona('David',40)
print(persona6)
persona7 = Persona('Marcelo',40)
print(persona7)
persona8 = Persona('Ciro',40)
print(persona8)
persona9 = Persona('Joha',40)
print(persona9)


print(f'contador personas: {Persona.contador_personas}')

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Asistencia mes de noviembre: Sofía Aguirre Zelay
    
class Persona:
contador_persona = 0 

def __init__(self, nombre, edad):
    Persona.contador_personas += 1 
    self.id_persona = Persona.contador_personas
    self.nombre = nombre
    self.edad = edad

def __str__(self):
    return f'persona [{self.id_persona} {self.nombre} {self.edad}]'

Persona1 = Persona('Lucio', 64)
print(Persona1)
Persona2 = Persona('Fabiana', 53)
print(Persona2)
persona3 = Persona('Noelia', 35)
print(persona3)
persona4 = Persona('Mauro', 33)
print(persona4)
persona5 = Persona('Camila', 19)
print (persona5)

print(f'contador personas: {Persona.contador_personas}')
    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Asistencia mes de noviembre:
    
